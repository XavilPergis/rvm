//! Method {
//!     access_flags: u16,
//!     name_index: u16,
//!     descriptor_index: u16,
//!     attributes_count: u16,
//!     attributes: [AttributeInfo; attributes_count],
//! }

use crate::raw::{
    attribute::{parse_attribute, AttributeInfo, AttributeResult},
    constant::{Constant, PoolIndex},
    ByteParser,
};

/// Method properties bitfield.
///
/// Interface methods must have their `public` and `abstract` flags set. The may
/// have any of the `bridge`, `varargs`, or `synthetic` flags set.
///
/// Instance initialization methods may have at most one visibility modifier
/// set, as weel as any of the `varargs`, `synthetic`, or `strict` flags. It
/// must have no other flags than these set.
#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]
pub struct Access(u16);

impl Access {
    /// Declared abstract; no implementation is provided. If this flag is set
    /// none of the `final`, `native`, `private`, `static`, `strict` or
    /// `synchronized` flags may be set.
    pub const ABSTRACT: Access = Access(0x0400);
    /// A bridge method, generated by the compiler.
    pub const BRIDGE: Access = Access(0x0040);
    /// Declared final; must not be overridden (ยง5.4.5). If this flag is set,
    /// the `abstract` flag must not be set.
    pub const FINAL: Access = Access(0x0010);
    /// Declared native; implemented in a language other than Java. If this flag
    /// is set, the `abstract` flag must not be set.
    pub const NATIVE: Access = Access(0x0100);
    /// Declared private; accessible only within the defining class. If this
    /// flag is set, no other access modifier flags may be set. Additionally,
    /// the `abstract` flag must not be set.
    pub const PRIVATE: Access = Access(0x0002);
    /// Declared protected; may be accessed within subclasses. If this flag is
    /// set, no other access modifier flags may be set.
    pub const PROTECTED: Access = Access(0x0004);
    /// Declared public; may be accessed from outside its package. If this flag
    /// is set, no other access modifier flags may be set.
    pub const PUBLIC: Access = Access(0x0001);
    /// Declared static. If this flag is set, the `abstract` flag must not be
    /// set.
    pub const STATIC: Access = Access(0x0008);
    /// Declared strictfp; floating-point mode is FP-strict. If this flag is
    /// set, the `abstract` flag must not be set.
    pub const STRICT: Access = Access(0x0800);
    /// Declared synchronized; invocation is wrapped by a monitor use.
    pub const SYNCHRONIZED: Access = Access(0x0020);
    /// Declared synthetic; not present in the source code.
    pub const SYNTHETIC: Access = Access(0x1000);
    /// Declared with variable number of arguments.
    pub const VARARGS: Access = Access(0x0080);

    pub fn is(self, access: Access) -> bool {
        self & access != Access(0)
    }

    pub fn into_raw(self) -> u16 {
        self.0
    }
}

impl std::ops::BitAnd for Access {
    type Output = Access;

    fn bitand(self, other: Access) -> Access {
        Access(self.0 & other.0)
    }
}

impl std::ops::BitOr for Access {
    type Output = Access;

    fn bitor(self, other: Access) -> Access {
        Access(self.0 | other.0)
    }
}

pub(crate) fn parse_method(
    input: &mut ByteParser<'_>,
    pool: &[Constant],
) -> AttributeResult<Method> {
    let access = Access(input.parse_u16()?);
    let name = input.parse_u16()? as usize - 1;
    let descriptor = input.parse_u16()? as usize - 1;

    let attributes_len = input.parse_u16()? as usize;
    let attributes = input.seq(attributes_len, |input| parse_attribute(input, pool))?;

    Ok(Method {
        access,
        name,
        descriptor,
        attributes: attributes.into(),
    })
}

#[derive(Clone, Debug, Eq, PartialEq, Hash)]
pub struct Method {
    /// Method properties
    pub access: Access,
    /// Index into the constant pool, pointing to a `Constant::StringData` that
    /// denotes the name of the method.
    pub name: PoolIndex,
    /// Index into the constant pool, pointing to a `Constant::StringData` that
    /// denotes the method signature.
    pub descriptor: PoolIndex,
    pub attributes: Box<[AttributeInfo]>,
}
